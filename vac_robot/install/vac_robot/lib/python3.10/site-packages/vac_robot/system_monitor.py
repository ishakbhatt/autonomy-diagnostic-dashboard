import rclpy
from rclpy.node import Node
from std_msgs.msg import Float32
from std_msgs.msg import Header

import psutil

class SystemMonitor(Node):
    def __init__(self, compute_name):
        super().__init__('system_monitor')
        self.compute_name = compute_name

        # cpu 
        self.cpu_times_percent_pub = self.create_publisher(Float32, 'system/cpu_times_percent', 10)
        self.cpu_count_pub = self.create_publisher(Float32, 'system/cpu_count', 10)
        
        # memory
        self.vmemory_pub = self.create_publisher(Float32, 'system/virtual_memory', 10)        
        self.disk_usage_pub = self.create_publisher(Float32, 'system/disk_usage', 10) 
        
        # networking
        self.net_connections_pub = self.create_publisher(Float32, 'system/net_connections', 10)

        # compute sensors
        self.sensor_temperatures_pub = self.create_publisher(Float32, 'system/sensor_temperatures', 10)
        self.sensors_fan = self.create_publisher(Float32, 'system/sensors_fan', 10)
        self.sensors_battery = self.create_publisher(Float32, 'system/sensors_battery', 10)
        
        # publish frequency
        self.timer = self.create_timer(1.0, self.publish_system_info)

    def publish_system_info(self):
        # CPU
        cpu_percent = psutil.cpu_percent()
        cpu_msg = Float32()
        cpu_msg.data = cpu_percent
        self.cpu_times_percent_pub.publish(cpu_msg)

        cpu_count = psutil.cpu_count()
        cpu_count_msg = Float32()
        cpu_count_msg.data = float(cpu_count)
        self.cpu_count_pub.publish(cpu_count_msg)

        # Memory
        vmemory_percent = psutil.virtual_memory().percent
        mem_msg = Float32()
        mem_msg.data = vmemory_percent
        self.vmemory_pub.publish(mem_msg)

        disk_usage_percent = psutil.disk_usage('/').percent
        disk_msg = Float32()
        disk_msg.data = disk_usage_percent
        self.disk_usage_pub.publish(disk_msg)

        # Networking
        net_connections = len(psutil.net_connections())
        net_msg = Float32()
        net_msg.data = float(net_connections)
        self.net_connections_pub.publish(net_msg)

        # Compute Sensors 
        try:
            temps = psutil.sensors_temperatures()
            if 'coretemp' in temps:
                temp = temps['coretemp'][0].current
                temp_msg = Float32()
                temp_msg.data = temp
                self.sensor_temperatures_pub.publish(temp_msg)
        except Exception as e:
            self.get_logger().warn(f"Temperature sensor error: {e}")

        try:
            fans = psutil.sensors_fans()
            if fans:
                fan_speed = list(fans.values())[0][0].current
                fan_msg = Float32()
                fan_msg.data = fan_speed
                self.sensors_fan_pub.publish(fan_msg)
        except Exception as e:
            self.get_logger().warn(f"Fan sensor error: {e}")

        try:
            battery = psutil.sensors_battery()
            if battery:
                battery_percent = battery.percent
                batt_msg = Float32()
                batt_msg.data = battery_percent
                self.sensors_battery_pub.publish(batt_msg)
        except Exception as e:
            self.get_logger().warn(f"Battery sensor error: {e}")

        self.get_logger().info(f'Published system information for {self.compute_name}')